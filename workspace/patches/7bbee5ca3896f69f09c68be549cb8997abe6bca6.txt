diff --git a/kernel/panic.c b/kernel/panic.c
index b333380c6bb2..a59aa471fcb8 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -24,6 +24,9 @@
 #include <linux/init.h>
 #include <linux/nmi.h>
 #include <linux/console.h>
+#include <linux/kernel.h>
+#include <linux/kcov.h>
+#include <linux/slab.h>
 
 #define PANIC_TIMER_STEP 100
 #define PANIC_BLINK_SPD 18
@@ -71,7 +74,36 @@ void __weak nmi_panic_self_stop(struct pt_regs *regs)
 }
 
 atomic_t panic_cpu = ATOMIC_INIT(PANIC_CPU_INVALID);
-
+static void print_kcov_pcs()
+{
+	struct task_struct *t;
+	unsigned long *area, pos;
+	int i, k, messages;
+	unsigned int mode, size;
+	char *msg, *counter;
+	t = current;
+	mode = READ_ONCE(t->kcov_mode);
+	WRITE_ONCE(t->kcov_mode, KCOV_MODE_DISABLED);
+	area = t->kcov_area;
+	size = t->kcov_size;
+	if (area != NULL) {
+		pos = READ_ONCE(area[0]);
+		if (mode == KCOV_MODE_TRACE_PC && READ_ONCE(t->kcov_size) >= 262144) {
+			msg = kmalloc(16 * 60 * sizeof(char) + 1, GFP_ATOMIC);
+			messages = 0;
+			for (k = 1; k <= pos;) {
+				counter = msg;
+				for (i = 0; i < 60 && k <= pos; i++, k++) {
+					counter += sprintf(counter, "%lx", READ_ONCE(area[k]));
+				}
+				counter[0] = '\0';
+				messages++;
+				printk(KERN_INFO "%d/%d]%s\n", messages, (pos-1)/60 + 1, msg);
+			}
+			kfree(msg);
+		}
+	}
+}
 /**
  *	panic - halt the system
  *	@fmt: The text string to print
@@ -183,6 +215,8 @@ void panic(const char *fmt, ...)
 	console_trylock();
 	console_unlock();
 
+	print_kcov_pcs();
+
 	if (!panic_blink)
 		panic_blink = no_blink;
 
